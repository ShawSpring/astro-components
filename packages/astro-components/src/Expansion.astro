---
export interface Props {
    /**
     * at least one children required for slot
     */
    children: any;
    heading: string;
    /**
     * initial expand state, default is true
     */
    expand?: boolean;
    /**
     *  custom class names appended to the component
     */
    class?: string;    
}

const {heading, expand = true, class: className} = Astro.props;
---

<ss-expansion class={className}>
    <!-- margin失效, 需要从它的父元素设置-->
    <div class="toggle" aria-expanded={expand ? 'true' : 'false'}>
        <div role="heading" class="toggle-heading">{heading}</div>
        <div class="toggle-icon" aria-hidden="true" >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="1.25rem"
                height="1.25rem"
                viewBox="0 0 48 48">
                <path
                    fill="none"
                    stroke="currentColor"
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="4"
                    d="M19 12L31 24L19 36"></path>
            </svg>
        </div>
    </div>
    <div class="content">
        <slot/>
    </div>
</ss-expansion>

<script>
    class SSExpansion extends HTMLElement {
        constructor() {
            super();
        }
        connectedCallback() {
            const divs = this.querySelectorAll(':scope > div');
            const content = divs[1] as HTMLDivElement;
            const toggle = divs[0] as HTMLElement;

            this.firstElementChild?.addEventListener('click', () => {
                const state = toggle.getAttribute('aria-expanded') === 'true' ? 'false' : 'true';
                toggle.setAttribute('aria-expanded', state);
                if (state === 'true') {
                    content.style.setProperty('height', 'auto');
                    const height = content.getBoundingClientRect().height;
                    content.style.setProperty('height', '0px');
                    content.clientHeight;
                    content.style.setProperty('height', `${height}px`);
                } else {
                    content.style.setProperty('height', '0px');
                }
            });
            // initial content height when expanded
            if (toggle.getAttribute('aria-expanded') === 'true') {
                content.style.setProperty('height', 'auto');
                const height = content.getBoundingClientRect().height;
                content.style.setProperty('height', `${height}px`);
            }
        }
    }
    customElements.define('ss-expansion', SSExpansion);
</script>

<style>
    ss-expansion {
        display: block;
    }

    .toggle {
        display: flex;
        align-items: center;
        justify-content: space-between;
        cursor: pointer;
        line-height: 2rem;
        height: 2rem;
    }

    .toggle-heading {
        font-weight: bold;
        font-size: large; 
        user-select: none; 
        flex-grow: 1;
        margin: 0;
    }
    .toggle-icon {
        transition: transform 0.3s ease-out;
    }
    [aria-expanded='true'] .toggle-icon {
        transform: rotate(90deg);
    }
    .content {
        overflow: hidden;
        transition: height 0.3s ease-out;
    }
    [aria-expanded='true'] + .content {
        height: auto;
    }
    [aria-expanded='false'] + .content {
        height: 0px;
    }
</style>
